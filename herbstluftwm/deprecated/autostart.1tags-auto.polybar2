#!/usr/bin/env bash
#
#
#                     ██                      ██                      ██
#                    ░██                     ░██                     ░██
#  ██████   ██   ██ ██████  ██████   ██████ ██████  ██████   ██████ ██████
# ░░░░░░██ ░██  ░██░░░██░  ██░░░░██ ██░░░░ ░░░██░  ░░░░░░██ ░░██░░█░░░██░
#  ███████ ░██  ░██  ░██  ░██   ░██░░█████   ░██    ███████  ░██ ░   ░██
# ██░░░░██ ░██  ░██  ░██  ░██   ░██ ░░░░░██  ░██   ██░░░░██  ░██     ░██
#░░████████░░██████  ░░██ ░░██████  ██████   ░░██ ░░████████░███     ░░██
# ░░░░░░░░  ░░░░░░    ░░   ░░░░░░  ░░░░░░     ░░   ░░░░░░░░ ░░░       ░░
#




hc() {
    herbstclient "$@"
}

hc emit_hook reload

#xsetroot -solid '#5A8E3A'
xsetroot -solid '#222222'		# background color
redshift -x && redshift -O 5500K	# reset && color temp
#setxkbmap -layout us

hc pad 0 23 0 0
# remove all existing keybindings
hc keyunbind --all

killall dzen2 &
killall conky &
# close tray if reloading
killall stalonetray &
killall compton &
killall dunst &
#killall feh &
killall polybar &
killall redshift &
killall nitrogen &

compton &
dunst -conf ~/.config/dunst/dunstrc &
feh --bg-fill ~/dotfiles/wallpaper/herbst.jpg &

#xrdb .Xresources


# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
#Mod=Mod1    # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier

## autostart
#hc spawn compton
hc spawn nitrogen --restore
#hc spawn dunst
#hc spawn dropbox
#hc spawn nm-applet
#hc spawn xfce4-panel


#hc keybind $Mod-Shift-q close
hc keybind $Mod-q close
#hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-c quit
hc keybind $Mod-Alt-l spawn lock -gpf Source-Code-Pro
#hc keybind $Mod-Shift-l spawn screenoff

#hc keybind $Mod-Alt-l spawn i3lock -i ~/Pictures/Wallpapers/rocket.png -l c0c5ce -w bf616a -o a3be8c
#hc keybind Alt-b spawn herbstpaneltoogle

# start favorite termnal
#hc keybind $Mod-Return spawn termite
hc keybind $Mod-Return spawn alacritty
#hc keybind $Mod-Shift-Return spawn tilda

# start rofi
hc keybind $Mod-d spawn rofi -modi "run,window" -show run -lines 10 -eh 1.5  -width 40 -padding 450 -opacity "80" -font "SourceCodePro 12"

# start some programs
#hc keybind $Mod-x spawn firefox

# start google chrome
hc keybind $Mod-x spawn google-chrome-stable --proxy-pac-url="http://127.0.0.1:8080/proxy.js" #--force-device-scale-factor=1.3
#hc keybind $Mod-x spawn google-chrome-stable
#hc keybind $Mod-x spawn google-chrome-stable --proxy-server="socks5://127.0.0.1:7591" #--proxy-pac-url="file://~/dotfiles/privoxy/autoproxy.pac"
													

hc keybind $Mod-Alt-g spawn gpick --pick
#hc keybind $Mod-Shift-x spawn qutebrowser
#hc keybind $Mod-d spawn dmenu_run -x 810 -y 540 -w 300 -h 25 -fn "tewi 9"
hc keybind $Mod-Alt-m spawn alacritty -e ncmpcpp
hc keybind $Mod-Ctrl-r spawn alacritty -e ranger
hc keybind $Mod-Alt-h spawn alacritty -e hangups
hc keybind $Mod-Alt-r spawn alacritty -e rtv
hc keybind $Mod-Alt-w spawn alacritty -e weechat
hc keybind $Mod-Alt-t spawn alacritty -e tmux
# Screenshot
hc keybind Print spawn ~/.config/herbstluftwm/screenshot.sh

# volume control
#hc keybind XF86AudioRaiseVolume spawn pulsemixer --id 2 --change-volume +5
#hc keybind XF86AudioLowerVolume spawn pulsemixer --id 2 --change-volume -5
#hc keybind XF86AudioMute        spawn pulsemixer --id 2 --toggle-mute

## basic movement
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-j     focus left
hc keybind $Mod-k     focus down
hc keybind $Mod-i     focus up
hc keybind $Mod-l     focus right

# moving clients
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
hc keybind $Mod-Shift-j     shift left
hc keybind $Mod-Shift-k     shift down
hc keybind $Mod-Shift-i     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u       split   bottom  0.5
hc keybind $Mod-o       split   right   0.5
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames
resizestep=0.05
hc keybind $Mod-Control-j       resize left +$resizestep
hc keybind $Mod-Control-k       resize down +$resizestep
hc keybind $Mod-Control-i       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# horizontal or vertical split by default ( version > 0.9.3)
[ "$(uname -n)" = "ultimate-lnx" ] && hc attr settings.default_frame_layout vertical || hc attr settings.default_frame_layout horizontal


#monitor_count=$(herbstclient list_monitors | wc -l)
monitor_count=$(xrandr --listmonitors | head -n1 | cut -d' ' -f2)
#echo $monitor_count > ~/.trash/qbai

## tags

##if true; then
if [ "$monitor_count" -lt 2 ]; then # single monitor

	#tag_names=("  " "  " "  " "  " "  " "   " "   " "  " "  " "  " )
	#tag_names=("WEB" "TERM" "FILE" "MEDIA" "GIMP": "MISC" "CODE" "RRENT" "REDDIT" "CHAT")
	#tag_names=("I" "II" "III" "IV" "V" "VI" "VII" "VIII" "IX" "X")
	tag_names=( {1..9} )
	tag_keys=( {1..9} 0 )

	hc rename default "${tag_names[0]}" || true
	for i in ${!tag_names[@]} ; do
    		hc add "${tag_names[$i]}"
    		key="${tag_keys[$i]}"
    		if ! [ -z "$key" ] ; then
        		hc keybind "$Mod-$key" use_index "$i"
        		hc keybind "$Mod-Shift-$key" move_index "$i"
    		fi
	done

	# cycle through tags
	hc keybind $Mod-period use_index +1 --skip-visible
	hc keybind $Mod-comma  use_index -1 --skip-visible

else	# multi monitors

	mon1_names=( 1_{1..5} ) # tag names for monitor 1
	mon2_names=( 2_{1..4} ) # tag names for monitor 2
	#fallback_names=( {1..5} ) # tag names for all other monitors
	tag_keys=( {1..9} 0 )

	hc rename default "${mon1_names[0]}" || true
	#for tag in "${mon1_names[@]}" "${mon2_names[@]}" "${fallback_names[@]}" ; do
	for tag in "${mon1_names[@]}" "${mon2_names[@]}" ; do
    		hc try silent add "$tag"
	done

	# Statically define which tag should be send to which monitor
	lock_tag_to_monitor() {
	    herbstclient chain \
	        , new_attr string tags.by-name."$1".my_monitor \
	        , set_attr tags.by-name."$1".my_monitor "$2"
	}
	# Already lock some of the tags to a monitor, for example:
	# lock the second tag to the monitor with index 1
	for i in ${!mon1_names[@]} ; do
	    lock_tag_to_monitor "${mon1_names[$i]}" 0
	    
	    key="${tag_keys[$i]}"
	    if ! [ -z "$key" ] ; then
	        # first check if the tag is locked to some monitor.
	        # if so, first focus the monitor
	        hc keybind "$Mod-$key" \
	            chain , silent substitute M tags."i".my_monitor \
	                        focus_monitor M \
	                  , use_index "$i"
	        hc keybind "$Mod-Shift-$key" move_index "$i"
	    fi
	done
	
	for i in ${!mon2_names[@]} ; do
	    lock_tag_to_monitor "${mon2_names[$i]}" 1
	    
	    key="${tag_keys[$i+5]}"
	    if ! [ -z "$key" ] ; then
	        # first check if the tag is locked to some monitor.
	        # if so, first focus the monitor
	        hc keybind "$Mod-$key" \
	            chain , silent substitute M tags."$i+5".my_monitor \
	                        focus_monitor M \
	                  , use_index "$i+5"
	        hc keybind "$Mod-Shift-$key" move_index "$i+5"
	    fi
	done
	

	# cycle through tags
	# add additional information in order to cycle only through a monitor's tags
	# and not through all tags
	define-tag-cycle() {
    		local n=$#
    		local tags=( "$@" )
    		for i in "${!tags[@]}" ; do
        		local t="${tags[$i]}"
        		hc chain , new_attr string tags.by-name."$t".my_previous_tag \
                 		, set_attr tags.by-name."$t".my_previous_tag "${tags[$(((i - 1 + n) % n))]}" \
                 		, new_attr string tags.by-name."$t".my_next_tag \
                 		, set_attr tags.by-name."$t".my_next_tag "${tags[$(((i + 1) % n))]}"
    		done
	}

	define-tag-cycle "${mon1_names[@]}"
	define-tag-cycle "${mon2_names[@]}"
	#define-tag-cycle "${fallback_names[@]}"

	# cycle through tags
	# check whether the current tag as a custom "next tag" configured
	# if yes, jump to that one, otherwise fall back to ordinary use_index +1
	hc keybind $Mod-period or , substitute NEXT tags.focus.my_next_tag use NEXT  \
                          , use_index +1 --skip-visible
	hc keybind $Mod-comma  or , substitute PREV tags.focus.my_previous_tag use PREV  \
                          , use_index +1 --skip-visible

fi      # end of multi monitors


# horizontal or vertical split by default ( version > 0.9.3)
hc foreach T tags.by-name. sprintf ATTR '%c.tiling.root.algorithm' T set_attr ATTR vertical

# start all windows in floating mode
#for attr in $(herbstclient complete 1 attr tags.by-name); do
#	    herbstclient attr "$attr.floating" true
#done         


hc keybind $Mod-r remove
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

## mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
#hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-ESC   		cycle_all -1
hc keybind $Mod-c cycle

#hc keybind $Mod-Shift-u jumpto urgent
# unminimize the client
hc keybind $Mod-Shift-u jumpto last-minimized
#hc jumpto longest-minimized

## theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#151515'

# panel color
hc set frame_bg_normal_color '#900900'
hc set frame_border_normal_color '#111313'
# blank window frame thing
hc set frame_bg_active_color '#303030'
hc set frame_border_width 0
hc set always_show_frame 1
hc set frame_bg_transparent 1
hc set frame_transparent_width 0
hc set frame_gap 1

#set selected 'window'and selected workspace through its attr
hc attr theme.active.color '#5f8787'
hc attr theme.normal.color  '#353535'
hc attr theme.urgent.color '#ffffff'
hc attr theme.inner_width 2
hc attr theme.outer_width 2
hc attr theme.inner_color '#252525'
hc attr theme.border_width 6
hc attr theme.floating.border_width 8
hc attr theme.floating.outer_width 2
hc attr theme.floating.inner_width  2
hc attr theme.floating.outer_color '#252525'
hc attr theme.floating.inner_color  '#252525'
hc attr theme.active.inner_color '#252525'
hc attr theme.active.outer_color '#252525'
hc attr theme.background_color '#202020'

hc set window_gap 0
hc set frame_padding 0
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set focus_follows_mouse 1
hc set mouse_recenter_gap 0

## rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
#hc rule floatplacement=smart
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminalsy
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
hc rule class 'alacritty --name ncmpcpp -e ncmpcpp' focus=on
#hc rule fixedsize floating=on
hc rule instance=ncmpcpp tag=4 pseudotile=on  # move all ncmpcpp to tag 4
# unlock, just to be sure
hc unlock


herbstclient set tree_style '╾│ ├└╼─┐'

# do multi monitor setup here, e.g.:
# config manually
#hc set_monitors 2560x1600+0+0 3440x1440+2560+0
# or simply:

#xrandr --listmonitors > ~/.trash/qbai 2>&1
#echo "" >> ~/.trash/qbai 2>&1
#herbstclient list_monitors >> ~/.trash/qbai 2>&1

hc detect_monitors
#if [ "$monitor_count" -lt 2 ]; then # single monitor
if [ "$monitor_count" -ge 2 ]; then # multi monitor
	#hc detect_monitors
#else	# multi monitors

	#xrandr --output DP-1 --primary --mode 2560x2880 --pos 0x0 --output DP-3 --mode 3840x2160 --pos 2560x0
	#sleep 1

	#hc detect_monitors
	hc list_monitors | cut -d: -f1 | sort -rn | while read -r idx; do
	    hc remove_monitor "$idx"
	done
	
	if [ "$(uname -n)" = "ultimate-lnx" ]; then
	    hc add_monitor 2560x2880+0+0 "${mon1_names[0]}"
	    hc add_monitor 3840x2160+2560+0 "${mon2_names[0]}"
	else
	    :
	fi
	
	
	#hc set_monitors 2560x2880+0+0 3840x2160+2560+720	# align as bottom
	#xrandr --output DP-3 --off				# temporarily close
	#xrandr --output DP-3 --mode 3840x2160 --right-of DP-1  # temporarily open
fi


# find the panel
#panel=~/.config/herbstluftwm/panel.sh
#[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh

panel_height=33

for monitor in $(herbstclient list_monitors | cut -d: -f1) ; do
	# start it on each monitor
	#"$panel" $monitor &

	#hc pad $monitor 16;
	#hc pad $monitor 16 0 0 0
	hc pad $monitor $panel_height

	#hc rename_monitor $monitor Mon$((i+1))			
done

[ "$monitor_count" -ge 2 ] && m_tags="tags_per_mon" || m_tags="ewmh"

for monitor in $(polybar --list-monitors |cut -d: -f1); do	
#for monitor in $(xrandr --query | grep " connected" |cut -d" " -f1); do
      MONITOR=$monitor  M_TAGS=$m_tags PANEL_HEIGHT=$panel_height polybar top &
done

#herbstclient chain $cmds&
